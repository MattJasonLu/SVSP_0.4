<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jdlink.mapper.QuestionnaireMapper">
    <resultMap id="ClientRM" type="Client" autoMapping="true">
        <result property="clientId" column="clientId"/>
        <result property="companyName" column="companyName"/>
        <result property="product" column="product"/>
        <result property="industry" column="industry"/>
        <result property="contactName" column="contactName"/>
        <result property="location" column="location"/>
        <result property="phone" column="phone"/>
    </resultMap>
    <resultMap id="MixingElementRM" type="MixingElement">
        <result property="id" column="id"/>
    </resultMap>
    <resultMap id="SensitiveElementRM" type="SensitiveElement">
        <result property="id" column="id"/>
    </resultMap>
    <resultMap id="RawWastesRM" type="RawWastes">
        <result property="materialId" column="materialId"/>
    </resultMap>
    <resultMap id="WasteProcessRM" type="WasteProcess">
        <result property="processId" column="processId"/>
    </resultMap>
    <resultMap type="DeriveWastes" id="DeriveWastesRM">
        <result property="id" column="id"/>
        <collection property="mixingElementList" select="getMixingElement" column="id"
                    ofType="com.jdlink.domain.MixingElement" javaType="ArrayList"/>
        <collection property="sensitiveElementList" select="getSensitiveElement" column="id"
                    ofType="com.jdlink.domain.SensitiveElement" javaType="ArrayList"/>
        <collection property="wasteCharacterList" select="getWasteCharacter" column="id"
                    ofType="com.jdlink.domain.WasteCharacter" javaType="ArrayList"/>
        <collection property="wasteProtectList" select="getWasteProtect" column="id"
                    ofType="com.jdlink.domain.WasteProtect" javaType="ArrayList"/>
    </resultMap>
    <resultMap type="Questionnaire" id="QuestionnaireRM" autoMapping="true">
        <result property="questionnaireId" column="questionnaireId"/>
        <result property="applyState" column="state" javaType="com.jdlink.domain.ApplyState"/>
        <result property="author" column="author"/>
        <result property="time" column="time"/>
        <association property="client" javaType="Client" resultMap="ClientRM"/>
        <collection property="rawWastesList" select="getRawWastes" column="questionnaireId"
                    ofType="com.jdlink.domain.RawWastes" javaType="ArrayList"/>
        <collection property="wasteInclusionTypeList" select="getInclusionType" column="questionnaireId"
                    ofType="com.jdlink.domain.WasteInclusionType" javaType="ArrayList"/>
        <collection property="wasteProcessList" select="getWasteProcess" column="questionnaireId"
                    ofType="com.jdlink.domain.WasteProcess" javaType="ArrayList"/>
        <collection property="deriveWastesList" select="getDeriveWastes" column="questionnaireId"
                    ofType="com.jdlink.domain.DeriveWastes" javaType="ArrayList"/>
    </resultMap>
    <insert id="add" parameterType="Questionnaire" >
        insert into questionnaire ( questionnaireId, clientId, time, author, state )
        values ( #{questionnaireId}, #{client.clientId}, #{time}, #{author}, #{applyState} );
        <if test="rawWastesList.size() > 0">
            <foreach collection="rawWastesList" item="rawWastes" index="index">
            insert into r_questionnaireAndRawWastes (questionnaireId,rawWastesId)
            values (#{questionnaireId,jdbcType=VARCHAR},#{rawWastes.materialId,jdbcType=VARCHAR});
            insert into t_rawWastes ( materialId, code, mainMaterial, auxMaterial, draginMaterial )
            values (#{rawWastes.materialId}, #{rawWastes.code}, #{rawWastes.mainMaterial}, #{rawWastes.auxMaterial}, #{rawWastes.draginMaterial});
            </foreach>
        </if>
        <if test="wasteInclusionTypeList != null and wasteInclusionTypeList.size() > 0">
            insert into r_questionnaireAndWasteInclusionType (questionnaireId, wasteInclusionType)
            values
            <foreach collection="wasteInclusionTypeList" item="wasteInclusionType" index="index" separator="," close=";">
                <if test="wasteInclusionType != null">
                  (#{questionnaireId,jdbcType=VARCHAR},#{wasteInclusionType,jdbcType=VARCHAR})
                </if>
            </foreach>
        </if>
        <if test="wasteProcessList.size() > 0">
            <foreach collection="wasteProcessList" item="wasteProcess" index="index">
            insert into r_questionnaireAndWasteProcess (questionnaireId,wasteProcessId)
            values (#{questionnaireId,jdbcType=VARCHAR},#{wasteProcess.processId,jdbcType=VARCHAR});
            insert into t_wasteProcess ( processId, code, description, quantity, lastProcessTime, yearQuantity, packageSituation )
            values (#{wasteProcess.processId}, #{wasteProcess.code}, #{wasteProcess.description}, #{wasteProcess.quantity}, #{wasteProcess.lastProcessTime}, #{wasteProcess.yearQuantity}, #{wasteProcess.packageSituation});
            </foreach>
        </if>
        <if test="deriveWastesList.size() > 0">
            <foreach collection="deriveWastesList" item="deriveWastes" index="index">
              insert into r_questionnaireAndDeriveWastes (questionnaireId,deriveWastesId)
              values (#{questionnaireId,jdbcType=VARCHAR},#{deriveWastes.id,jdbcType=VARCHAR});
                insert into t_deriveWastes ( id, name, code, formType, formTypeDetail,
                smellType, smellTypeDetail, solubility, solubilityDetail, isLowTemp,
                lowTemp, solubleTemp, isMixture, eyeMeasures, skinMeasures, swallowMeasures,
                suctionMeasures, putOutFireMeasures, leakMeasures )
                values ( #{deriveWastes.id}, #{deriveWastes.name}, #{deriveWastes.code}, #{deriveWastes.formType}, #{deriveWastes.formTypeDetail},
                #{deriveWastes.smellType}, #{deriveWastes.smellTypeDetail}, #{deriveWastes.solubility}, #{deriveWastes.solubilityDetail},
                #{deriveWastes.isLowTemp}, #{deriveWastes.lowTemp}, #{deriveWastes.solubleTemp}, #{deriveWastes.isMixture}, #{deriveWastes.eyeMeasures},
                #{deriveWastes.skinMeasures}, #{deriveWastes.swallowMeasures}, #{deriveWastes.suctionMeasures}, #{deriveWastes.putOutFireMeasures},
                #{deriveWastes.leakMeasures} );
                <if test="deriveWastes.mixingElementList != null and deriveWastes.mixingElementList.size() > 0">
                    <foreach collection="deriveWastes.mixingElementList" item="mixingElement" index="index">
                        insert into r_deriveWastesAndMixingElement (deriveWastesId,mixingElementId)
                        values (#{deriveWastes.id,jdbcType=VARCHAR},#{mixingElement.id,jdbcType=VARCHAR});
                        insert into t_mixingElement ( id, name, minimum, average, maximum )
                        values (#{mixingElement.id}, #{mixingElement.name}, #{mixingElement.minimum}, #{mixingElement.average}, #{mixingElement.maximum} );
                    </foreach>
                </if>
                <if test="deriveWastes.sensitiveElementList != null and deriveWastes.sensitiveElementList.size() > 0">

                    <foreach collection="deriveWastes.sensitiveElementList" item="sensitiveElement" index="index">
                        insert into r_deriveWastesAndSensitiveElement (deriveWastesId,sensitiveElementId)
                        values (#{deriveWastes.id,jdbcType=VARCHAR},#{sensitiveElement.id,jdbcType=VARCHAR});
                        insert into t_sensitiveElement ( id, chemicalType, isOrganic )
                        values (#{sensitiveElement.id}, #{sensitiveElement.chemicalType}, #{sensitiveElement.isOrganic} );
                    </foreach>
                </if>
                <if test="deriveWastes.wasteCharacterList != null and deriveWastes.wasteCharacterList.size() > 0">
                    insert into r_deriveWastesAndWasteCharacter (deriveWastesId, wasteCharacter)
                    values
                    <foreach collection="deriveWastes.wasteCharacterList" item="wasteCharacter" index="index" separator="," close=";">
                        (#{deriveWastes.id,jdbcType=VARCHAR},#{wasteCharacter,jdbcType=VARCHAR})
                    </foreach>
                </if>
                <if test="deriveWastes.wasteProtectList != null and deriveWastes.wasteProtectList.size() > 0">
                    insert into r_deriveWastesAndWasteProtect (deriveWastesId, wasteProtect)
                    values
                    <foreach collection="deriveWastes.wasteProtectList" item="wasteProtect" index="index" separator="," close=";">
                        (#{deriveWastes.id,jdbcType=VARCHAR},#{wasteProtect,jdbcType=VARCHAR})
                    </foreach>
                </if>
            </foreach>
        </if>
    </insert>

    <delete id="delete" parameterType="Questionnaire" >
        delete from questionnaire where questionnaireId= #{questionnaireId}
    </delete>

    <select id="search" parameterType="String" resultMap="QuestionnaireRM">
        SELECT questionnaire.questionnaireId, client.companyName, client.industry, client.clientId,
          client.product, client.contactName, client.location, questionnaire.state, questionnaire.author, questionnaire.time
            FROM questionnaire JOIN client WHERE questionnaire.clientId=client.clientId
            AND (questionnaire.questionnaireId LIKE "%"#{keyword}"%" OR
            client.companyName LIKE "%"#{keyword}"%" OR client.industry LIKE "%"#{keyword}"%" OR
            client.product LIKE "%"#{keyword}"%" OR questionnaire.state LIKE "%"#{keyword}"%" OR
            questionnaire.author LIKE "%"#{keyword}"%" OR questionnaire.time LIKE binary "%"#{keyword}"%") ORDER BY questionnaire.time DESC;
    </select>

    <select id="getById" parameterType="String" resultMap="QuestionnaireRM">
        SELECT questionnaire.questionnaireId, client.companyName, client.industry, client.clientId, client.phone,
          client.product, client.contactName, client.location, questionnaire.state, questionnaire.author, questionnaire.time,
          questionnaire.isMaterialComplete, questionnaire.isCooperate, questionnaire.isDedicate, questionnaire.notCompleteReason,
          questionnaire.isMeetRequire, questionnaire.isCooperate, questionnaire.acceptIntend1, questionnaire.wasteName1, questionnaire.wasteName2,
          questionnaire.wasteName3, questionnaire.wasteName4, questionnaire.wasteName5, questionnaire.wasteName6, questionnaire.otherRisk,
          questionnaire.acceptIntend2, questionnaire.unacceptReason2, questionnaire.conditionReason2, questionnaire.isStore, questionnaire.storeReason,
          questionnaire.isProcess, questionnaire.processReason, questionnaire.acceptIntend3, questionnaire.unacceptReason3, questionnaire.conditionReason3,
          questionnaire.isExamined
            FROM questionnaire JOIN client WHERE questionnaire.clientId=client.clientId AND questionnaireId = #{questionnaireId};
    </select>

    <select id="getRawWastes" parameterType="String" resultMap="RawWastesRM">
        SELECT * FROM t_rawWastes WHERE materialId in (
          SELECT r_questionnaireAndRawWastes.rawWastesId FROM r_questionnaireAndRawWastes
          WHERE questionnaireId=#{questionnaireId});
    </select>

    <select id="getInclusionType" parameterType="String" resultType="WasteInclusionType" >
        SELECT wasteInclusionType FROM r_questionnaireAndWasteInclusionType WHERE questionnaireId=#{questionnaireId};
    </select>

    <select id="getWasteProcess" parameterType="String" resultMap="WasteProcessRM">
        SELECT * FROM t_wasteProcess WHERE processId in (
        SELECT r_questionnaireAndWasteProcess.wasteProcessId FROM r_questionnaireAndWasteProcess
        WHERE questionnaireId=#{questionnaireId});
    </select>

    <select id="getDeriveWastes" parameterType="String" resultMap="DeriveWastesRM">
        SELECT * from t_deriveWastes WHERE t_deriveWastes.id in
        (select r_questionnaireAndDeriveWastes.deriveWastesId from
        r_questionnaireAndDeriveWastes WHERE questionnaireId=#{questionnaireId});
    </select>

    <select id="getMixingElement" parameterType="String" resultMap="MixingElementRM">
        SELECT * from t_mixingElement WHERE t_mixingElement.id in
        (SELECT r_deriveWastesAndMixingElement.mixingElementId
        FROM r_deriveWastesAndMixingElement WHERE deriveWastesId=#{id});
    </select>

    <select id="getSensitiveElement" parameterType="String" resultMap="SensitiveElementRM">
        SELECT * from t_sensitiveElement WHERE t_sensitiveElement.id in
        (SELECT r_deriveWastesAndSensitiveElement.sensitiveElementId
        FROM r_deriveWastesAndSensitiveElement WHERE deriveWastesId=#{id});
    </select>

    <select id="getWasteCharacter" parameterType="String" resultType="WasteCharacter">
        SELECT r_deriveWastesAndWasteCharacter.wasteCharacter
        FROM r_deriveWastesAndWasteCharacter WHERE deriveWastesId=#{id};
    </select>

    <select id="getWasteProtect" parameterType="String" resultType="WasteProtect">
        SELECT r_deriveWastesAndWasteProtect.wasteProtect
        FROM r_deriveWastesAndWasteProtect WHERE deriveWastesId=#{id};
    </select>

    <select id="getByClientId" parameterType="String" resultType="Questionnaire">
        SELECT * FROM questionnaire WHERE clientId = #{clientId}
    </select>

    <update id="update" parameterType="Questionnaire" >
        update questionnaire set clientId=#{client.clientId}, author=#{author}, state=#{applyState} where questionnaireId=#{questionnaireId};
        <if test="rawWastesList.size() > 0">
            <foreach collection="rawWastesList" item="rawWastes" index="index">
                UPDATE t_rawWastes SET code=#{rawWastes.code}, mainMaterial=#{rawWastes.mainMaterial},
                auxMaterial=#{rawWastes.auxMaterial}, draginMaterial=#{rawWastes.draginMaterial}
                WHERE materialId=#{rawWastes.materialId};
            </foreach>
        </if>
        DELETE FROM r_questionnaireAndWasteInclusionType WHERE questionnaireId=#{questionnaireId};
        <if test="wasteInclusionTypeList != null and wasteInclusionTypeList.size() > 0">
            insert into r_questionnaireAndWasteInclusionType (questionnaireId, wasteInclusionType)
            values
            <foreach collection="wasteInclusionTypeList" item="wasteInclusionType" index="index" separator="," close=";">
                <if test="wasteInclusionType != null">
                    (#{questionnaireId,jdbcType=VARCHAR},#{wasteInclusionType,jdbcType=VARCHAR})
                </if>
            </foreach>
        </if>
        <if test="wasteProcessList.size() > 0">
            <foreach collection="wasteProcessList" item="wasteProcess" index="index">
                UPDATE t_wasteProcess SET code=#{wasteProcess.code}, description=#{wasteProcess.description},
                quantity=#{wasteProcess.quantity}, lastProcessTime=#{wasteProcess.lastProcessTime},
                yearQuantity=#{wasteProcess.yearQuantity}, packageSituation=#{wasteProcess.packageSituation}
                WHERE processId=#{wasteProcess.processId};
            </foreach>
        </if>
        <if test="deriveWastesList.size() > 0">
            <foreach collection="deriveWastesList" item="deriveWastes" index="index">
                UPDATE t_deriveWastes SET name=#{deriveWastes.name}, code=#{deriveWastes.code}, formType=#{deriveWastes.formType},
                formTypeDetail=#{deriveWastes.formTypeDetail}, smellType=#{deriveWastes.smellType}, smellTypeDetail=#{deriveWastes.smellTypeDetail},
                solubility=#{deriveWastes.solubility}, solubilityDetail=#{deriveWastes.solubilityDetail}, isLowTemp=#{deriveWastes.isLowTemp},
                lowTemp=#{deriveWastes.lowTemp}, solubleTemp=#{deriveWastes.solubleTemp}, isMixture=#{deriveWastes.isMixture}, eyeMeasures=#{deriveWastes.eyeMeasures},
                skinMeasures=#{deriveWastes.skinMeasures}, swallowMeasures=#{deriveWastes.swallowMeasures}, suctionMeasures=#{deriveWastes.suctionMeasures},
                putOutFireMeasures=#{deriveWastes.putOutFireMeasures}, leakMeasures=#{deriveWastes.leakMeasures} WHERE id=#{deriveWastes.id};
                <if test="deriveWastes.mixingElementList != null and deriveWastes.mixingElementList.size() > 0">
                    <foreach collection="deriveWastes.mixingElementList" item="mixingElement" index="index">
                        UPDATE t_mixingElement SET  name=#{mixingElement.name}, minimum=#{mixingElement.minimum}, average=#{mixingElement.average}, maximum=#{mixingElement.maximum} WHERE id=#{mixingElement.id};
                    </foreach>
                </if>
                <if test="deriveWastes.sensitiveElementList != null and deriveWastes.sensitiveElementList.size() > 0">

                    <foreach collection="deriveWastes.sensitiveElementList" item="sensitiveElement" index="index">
                        UPDATE t_sensitiveElement SET chemicalType=#{sensitiveElement.chemicalType}, isOrganic=#{sensitiveElement.isOrganic} WHERE id=#{sensitiveElement.id};
                    </foreach>
                </if>
                DELETE FROM r_deriveWastesAndWasteCharacter WHERE deriveWastesId=#{deriveWastes.id};
                <if test="deriveWastes.wasteCharacterList != null and deriveWastes.wasteCharacterList.size() > 0">
                    insert into r_deriveWastesAndWasteCharacter (deriveWastesId, wasteCharacter)
                    values
                    <foreach collection="deriveWastes.wasteCharacterList" item="wasteCharacter" index="index" separator="," close=";">
                        (#{deriveWastes.id,jdbcType=VARCHAR},#{wasteCharacter,jdbcType=VARCHAR})
                    </foreach>
                </if>
                DELETE FROM r_deriveWastesAndWasteProtect WHERE deriveWastesId=#{deriveWastes.id};
                <if test="deriveWastes.wasteProtectList != null and deriveWastes.wasteProtectList.size() > 0">
                    insert into r_deriveWastesAndWasteProtect (deriveWastesId, wasteProtect)
                    values
                    <foreach collection="deriveWastes.wasteProtectList" item="wasteProtect" index="index" separator="," close=";">
                        (#{deriveWastes.id,jdbcType=VARCHAR},#{wasteProtect,jdbcType=VARCHAR})
                    </foreach>
                </if>
            </foreach>
        </if>
    </update>

    <update id="examine" parameterType="Questionnaire">
        UPDATE questionnaire SET state='Examining', isMaterialComplete=#{isMaterialComplete}, notCompleteReason=#{notCompleteReason},
        isMeetRequire=#{isMeetRequire}, isCooperate=#{isCooperate}, isDedicate=#{isDedicate}, acceptIntend1=#{acceptIntend1},
        wasteName1=#{wasteName1}, wasteName2=#{wasteName2}, wasteName3=#{wasteName3}, wasteName4=#{wasteName4}, wasteName5=#{wasteName5},
        wasteName6=#{wasteName6}, otherRisk=#{otherRisk}, acceptIntend2=#{acceptIntend2}, unacceptReason2=#{unacceptReason2},
        conditionReason2=#{conditionReason2}, isStore=#{isStore}, storeReason=#{storeReason}, isProcess=#{isProcess},
        processReason=#{processReason}, acceptIntend3=#{acceptIntend3}, unacceptReason3=#{unacceptReason3}, conditionReason3=#{conditionReason3},
        isExamined=TRUE
        WHERE questionnaireId=#{questionnaireId};
    </update>

    <update id="signIn" parameterType="String">
        UPDATE questionnaire SET state='SignedIn' WHERE questionnaireId=#{quesionnaireId}
    </update>

    <update id="back" parameterType="Questionnaire">
        UPDATE questionnaire SET state='Backed', isMaterialComplete=#{isMaterialComplete}, notCompleteReason=#{notCompleteReason},
        isMeetRequire=#{isMeetRequire}, isCooperate=#{isCooperate}, isDedicate=#{isDedicate}, acceptIntend1=#{acceptIntend1},
        wasteName1=#{wasteName1}, wasteName2=#{wasteName2}, wasteName3=#{wasteName3}, wasteName4=#{wasteName4}, wasteName5=#{wasteName5},
        wasteName6=#{wasteName6}, otherRisk=#{otherRisk}, acceptIntend2=#{acceptIntend2}, unacceptReason2=#{unacceptReason2},
        conditionReason2=#{conditionReason2}, isStore=#{isStore}, storeReason=#{storeReason}, isProcess=#{isProcess},
        processReason=#{processReason}, acceptIntend3=#{acceptIntend3}, unacceptReason3=#{unacceptReason3}, conditionReason3=#{conditionReason3},
        isExamined=TRUE
        WHERE questionnaireId=#{questionnaireId};
    </update>

    <update id="updateAttachmentUrl" parameterType="Questionnaire">
        UPDATE questionnaire SET attachmentUrl=#{attachmentUrl} WHERE questionnaireId=#{questionnaireId}
    </update>

    <select id="list" resultMap="QuestionnaireRM">
        SELECT questionnaire.questionnaireId, client.companyName, client.industry, client.clientId, client.phone,
          client.product, client.contactName, client.location, questionnaire.state, questionnaire.author, questionnaire.time
            FROM questionnaire JOIN client WHERE questionnaire.clientId=client.clientId ORDER BY questionnaire.time DESC;
    </select>

    <select id="count" resultType="int">
        SELECT COUNT(*) FROM questionnaire;
    </select>

    <select id="listQuestionnaireAdmin" resultType="QuestionnaireAdmin">
        SELECT questionnaire.questionnaireId, client.companyName, client.industry,
          client.product, questionnaire.state, questionnaire.author AS contactName, questionnaire.time
            FROM questionnaire JOIN client WHERE questionnaire.clientId=client.clientId;
    </select>
</mapper>